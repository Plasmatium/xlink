#!/usr/local/bin/python3.5

from PyQt5.QtCore import QUrl, Qt
from PyQt5.QtGui import QGuiApplication, QColor, QPixmap
from PyQt5.QtQuick import QQuickView, QQuickImageProvider

import numpy as np
import pandas as pd
from numpy.random import random

from IPython.core.debugger import Tracer; set_trace=Tracer()
from time import sleep
 
import mpl

_view = None
_tmp = None

def pd_test(d1, d2):
    li = [[random() for x in range(d2)] for y in range(d1)]
    return str(pd.DataFrame(li)) + '\n'*3

def _log(string):
    #set_trace()
    print(string)

def _getDataFromPython(item, param):    # todo: item, prpty, data
    #set_trace()
    #global _tmp
    #_tmp = item
    p = param.toVariant()
    prpty = p.get('prpty')
    func = globals()[p.get('func')]
    argv = p.get('argv')
    if argv==None:
        rslt = func()
    else:
        rslt = func(*argv)
        
    if not item.setProperty(prpty, rslt):
        print('set property failed')
        print('\tsaparam: ',p, '\n\tresult: ', str(rslt)[0:100]+'\n...')
    
##############################################################################

class ImageProvider(QQuickImageProvider):
    def __init__(self):
        QQuickImageProvider.__init__(self, QQuickImageProvider.Pixmap)

    def requestPixmap(self, id, size):
        pixmap = QPixmap(100, 100)
        pixmap.fill(QColor(id))
        return pixmap


############################################################################## 
if __name__ == '__main__':
    path = r'test.qml'
    # path = './qml_elements/ContentWindow.qml'
 
    app = QGuiApplication([])
    a = app
    view = QQuickView(); _view = view
    view.engine().quit.connect(app.quit)
    view.engine().addImageProvider('chart', ImageProvider())
    view.setSource(QUrl(path))
    view.setColor(QColor(Qt.transparent))
    view.setFlags(Qt.Window|Qt.FramelessWindowHint)
    view.show()
 
    context = view.rootObject()
    view.rootContext().setContextProperty("mainwindow", view)

    context.log.connect(_log)   # 连接QML文件中的log信号
    context.quit.connect(view.close)
    context.getDataFromPython.connect(_getDataFromPython)
    app.exec_()
